buildscript {
  dependencies {
    classpath rootProject.ext.androidPlugin
    classpath rootProject.ext.psyncPlugin
    classpath rootProject.ext.versionsPlugin
    classpath rootProject.ext.errorPronePlugin
  }
}

apply plugin: 'com.android.application'
apply plugin: "net.ltgt.errorprone"
apply plugin: 'com.flipboard.psync'
apply plugin: 'com.github.ben-manes.versions' // ./gradlew dependencyUpdates -Drevision=release

private String getPropertyOrEmpty(String property) {
  if (hasProperty(property)) {
    return project.properties[property]
  } else {
    return ""
  }
}

repositories {
  mavenLocal()
  maven { url "https://jitpack.io" }
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  useLibrary 'org.apache.http.legacy'

  defaultConfig {
    applicationId "io.sweers.catchup"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode rootProject.ext.gitCommitCount
    versionName rootProject.ext.gitTag
    multiDexEnabled true
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true

    buildConfigField 'String', 'GIT_SHA', /"$gitSha"/
    buildConfigField 'long', 'GIT_TIMESTAMP', "$gitTimestamp"
    buildConfigField 'String', 'PROCUCT_HUNT_DEVELOPER_TOKEN',
        /"${getPropertyOrEmpty("catchup_product_hunt_developer_token")}"/
    buildConfigField 'String', 'GITHUB_DEVELOPER_TOKEN',
        /"${getPropertyOrEmpty("catchup_github_developer_token")}"/
    buildConfigField 'String', 'DESIGNER_NEWS_CLIENT_ID',
        /"${getPropertyOrEmpty("catchup_designer_news_client_id")}"/
    buildConfigField 'String', 'DRIBBBLE_CLIENT_ACCESS_TOKEN',
        /"${getPropertyOrEmpty("catchup_dribbble_access_token")}"/
    buildConfigField 'String', 'SMMRY_API_KEY', /"${getPropertyOrEmpty("catchup_smmry_api_key")}"/
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  signingConfigs {
    release {
      storeFile file("placeholder")
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }
  packagingOptions {
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'LICENSE.txt'
    exclude 'META-INF/rxjava.properties'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
  buildTypes {
    debug {
      applicationIdSuffix ".debug"
      versionNameSuffix "-dev"
    }
    release {
      buildConfigField 'String', 'BUGSNAG_KEY', /"${getPropertyOrEmpty("catchup_bugsnag_key")}"/
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.debug
    }
  }
  dexOptions {
    javaMaxHeapSize "2g"
    preDexLibraries = !rootProject.ext.ci
  }
  lintOptions {
    lintConfig file("lint.xml")
    abortOnError true
    check 'NewApi', 'InlinedApi'
    fatal 'NewApi', 'InlinedApi'
    enable 'UnusedResources'
    checkReleaseBuilds true
    textReport rootProject.ext.ci
    textOutput 'stdout'
    htmlReport !rootProject.ext.ci
    xmlReport !rootProject.ext.ci
  }
}

psync {
  includesPattern = "**/xml/prefs_*.xml"
  generateRx = true
}

def supportLibraries = configurations.create("supportCompile")
configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.group == 'com.android.support' && details.requested.name != 'multidex') {
      // We want to force all support libraries to use the same version, even if they're transitive.
      details.useVersion rootProject.ext.supportVersion
    }
    if (details.requested.group == 'com.google.android.gms') {
      // We want to force all play services libraries to use the same version, even if they're transitive.
      details.useVersion rootProject.ext.playServicesVersion
    }
  }
}

dependencies {
  // Support libs
  supportCompile rootProject.ext.supportAnnotations
  supportCompile rootProject.ext.supportAppCompat
  supportCompile rootProject.ext.supportV4
  supportCompile rootProject.ext.supportDesign
  supportCompile rootProject.ext.supportCustomTabs
  supportCompile rootProject.ext.constraintLayout
  supportCompile rootProject.ext.supportPalette

  compile supportLibraries
  testCompile supportLibraries
  androidTestCompile supportLibraries

  // Square/JW
  compile rootProject.ext.butterKnife
  annotationProcessor rootProject.ext.butterKnifeCompiler
  compile rootProject.ext.okhttp
  compile rootProject.ext.okio
  compile rootProject.ext.moshi
  compile rootProject.ext.moshiAdapters
  compile rootProject.ext.retrofit
  compile rootProject.ext.retrofitMoshi
  compile rootProject.ext.retrofitRxJava
  compile(rootProject.ext.retrofitXml) {
    exclude module: 'stax'
    exclude module: 'stax-api'
    exclude module: 'xpp3'
  }
  compile rootProject.ext.rxAndroid
  compile rootProject.ext.rxAndroid2
  compile rootProject.ext.rxJava
  compile rootProject.ext.rxJava2
  compile rootProject.ext.rxJava2Interop
  compile rootProject.ext.retrofitRxJava2
  compile rootProject.ext.rxBinding
  compile rootProject.ext.rxBindingV4
  compile rootProject.ext.timber
  compile rootProject.ext.threetenabp
  debugCompile rootProject.ext.madge
  debugCompile rootProject.ext.scalpel
  compile rootProject.ext.processPhoenix // Move back to debugCompile when it's not needed for daynight
  debugCompile rootProject.ext.telescope
  compile rootProject.ext.okhttpLoggingInterceptor
  debugCompile rootProject.ext.retrofitMock

  releaseCompile rootProject.ext.bugsnag

  // Misc
  compile rootProject.ext.autoDispose
  compile rootProject.ext.autoDisposeAndroid
  errorprone rootProject.ext.errorProneCore
  compile rootProject.ext.errorProneAnnotations
  compile rootProject.ext.barberApi
  annotationProcessor rootProject.ext.barberCompiler
  compile rootProject.ext.chipCloud
  compile rootProject.ext.flexbox
  compile rootProject.ext.glide
  compile rootProject.ext.glideOkhttp
  compile rootProject.ext.recyclerViewAnimators
  compile rootProject.ext.rxJava
  compile rootProject.ext.rxPreferences
  compile rootProject.ext.rxReceivers
  compile rootProject.ext.rxRelay
  compile(rootProject.ext.simpleXml) {
    exclude module: 'stax'
    exclude module: 'stax-api'
    exclude module: 'xpp3'
  }
  compile rootProject.ext.moshiLazyAdapters

  // Stetho
  debugCompile rootProject.ext.stetho
  debugCompile rootProject.ext.stethoOkHttp

  // Dagger
  annotationProcessor rootProject.ext.daggerCompiler
  provided rootProject.ext.javax
  compile rootProject.ext.dagger
  compile rootProject.ext.daggerAndroid

  // AutoValue
  provided rootProject.ext.autoValueAnnotations
  provided rootProject.ext.autoValueMoshi
  annotationProcessor rootProject.ext.autoValue
  annotationProcessor rootProject.ext.autoValueMoshi
  annotationProcessor rootProject.ext.autoValueRedacted

  // Conductor
  compile rootProject.ext.conductor
  compile rootProject.ext.conductorSupport

  // Test
  testCompile project(':testing-utils')
  testCompile rootProject.ext.rxJava2Extensions
  testCompile rootProject.ext.rxRelay
  androidTestCompile project(':testing-utils')
  androidTestCompile rootProject.ext.errorProneAnnotations
  androidTestCompile rootProject.ext.rxJava2
  androidTestCompile 'com.google.code.findbugs:jsr305:3.0.1'
  testCompile 'com.google.code.findbugs:jsr305:3.0.1'
  testCompile rootProject.ext.errorProneAnnotations

  // LeakCanary
  debugCompile rootProject.ext.leakCanary
  releaseCompile rootProject.ext.leakCanaryNoop
}
